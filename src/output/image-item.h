/* PSPP - a program for statistical analysis.
   Copyright (C) 2020 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>. */

#ifndef OUTPUT_IMAGE_ITEM_H
#define OUTPUT_IMAGE_ITEM_H 1

#include <cairo.h>
#include <stdbool.h>
#include "output/output-item.h"

struct image_item
  {
    struct output_item output_item; /* Superclass */
    cairo_surface_t *image;
  };

struct image_item *image_item_create (cairo_surface_t *);
struct image_item *image_item_unshare (struct image_item *);

/* This boilerplate for image_item, a subclass of output_item, was
   autogenerated by mk-class-boilerplate. */

#include <assert.h>
#include "libpspp/cast.h"

extern const struct output_item_class image_item_class;

/* Returns true if SUPER is a image_item, otherwise false. */
static inline bool
is_image_item (const struct output_item *super)
{
  return super->class == &image_item_class;
}

/* Returns SUPER converted to image_item.  SUPER must be a image_item, as
   reported by is_image_item. */
static inline struct image_item *
to_image_item (const struct output_item *super)
{
  assert (is_image_item (super));
  return UP_CAST (super, struct image_item, output_item);
}

/* Returns INSTANCE converted to output_item. */
static inline struct output_item *
image_item_super (const struct image_item *instance)
{
  return CONST_CAST (struct output_item *, &instance->output_item);
}

/* Increments INSTANCE's reference count and returns INSTANCE. */
static inline struct image_item *
image_item_ref (const struct image_item *instance)
{
  return to_image_item (output_item_ref (&instance->output_item));
}

/* Decrements INSTANCE's reference count, then destroys INSTANCE if
   the reference count is now zero. */
static inline void
image_item_unref (struct image_item *instance)
{
  output_item_unref (&instance->output_item);
}

/* Returns true if INSTANCE's reference count is greater than 1,
   false otherwise. */
static inline bool
image_item_is_shared (const struct image_item *instance)
{
  return output_item_is_shared (&instance->output_item);
}

void image_item_submit (struct image_item *);

#endif /* output/image-item.h */
